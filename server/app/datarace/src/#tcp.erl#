
-module(tcp).

-export([listen/1, 
	 accept/1, 
	 recv/1, 
	 connect/2, 
	 send/2, 
	 binary_login/2, 
	 binary_register/3,
	 close/1,
	 quick_login/4]).

-include("../include/types.hrl").


listen(Port) ->
    gen_tcp:listen(Port, [binary, inet, {active, once}, {packet, 4}]).

accept(ListenSocket) ->
    gen_tcp:accept(ListenSocket).

recv(Socket) ->
    receive
	{tcp, _Socket, Packet} ->
	    inet:setopts(Socket, [{active, once}]),
	    {tcp, Packet}
    after 5000 ->
	    error
    end.

connect(Address, Port) ->
    gen_tcp:connect(Address, Port, [binary, inet, {packet, 4}, {active, true}]).

send(Socket, Data) ->
    gen_tcp:send(Socket, Data).

binary_login(Username, Password) ->
    Un = Username ++ [0 || _ <- lists:seq(1, 50 - length(Username))],
    Pw = Password ++ [0 || _ <- lists:seq(1, 50 - length(Password))],
    list_to_binary([0] ++ Un ++ Pw).

binary_register(Username, Password, Email) ->
    Un = Username ++ [0 || _ <- lists:seq(1, 50 - length(Username))],
    Pw = Password ++ [0 || _ <- lists:seq(1, 50 - length(Password))],
    Em = Email ++ [0 || _ <- lists:seq(1, 50 - length(Email))],
    list_to_binary([1] ++ Un ++ Pw ++ Em).

close(Socket) ->
    gen_tcp:close(Socket).

quick_login(Address, Port, Username, Password) ->
    case connect(Address, Port) of
	{ok, Socket} ->
	    LoginPacket = binary_login(Username, Password),
	    send(Socket, LoginPacket),
	    case recv(Socket) of
		{tcp, ?LOGIN_TRUE} ->
		    {Socket, logged_in};
		{tcp, ?LOGIN_FALSE_USERNAME} ->
		    {Socket, wrong_username};
		{tcp, ?LOGIN_FALSE_PASSWORD} ->
		    {Socket, wrong_password};
		{tcp, ?LOGIN_FALSE_LOGGED_IN} ->
		    {Socket, already_logged_in};
		{error, Reason} ->
		    {Socket, Reason};
		Error -> 
		    Error
	    end;
	Error -> 
	    Error
    end.
	    
quick_request(Socket) ->
    send(Socket, ?REQUEST).

%% quick_request_lookup(Socket) ->
%%     send(Socket, ?REQUEST_LOOKUP),
%%     case recv(Socket) of 
%% 	{tcp, <<?REQUEST_LOOKUP_REPLY_MADE:2/binary, Made/binary>>} ->
%% 	    Made;
%% 	Made ->
%% 	    Made
%%     end,
%%     case recv(Socket) of 
%% 	{tcp, <<?REQUEST_LOOKUP_REPLY_CHAL:2/binary, Chal/binary>>} ->
%% 	    Chal;
%% 	Chal ->
%% 	    Chal
%%     end,
%%     {Made, Chal}.




    
